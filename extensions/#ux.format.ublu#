# ux.format.ublu
# Extension to Ublu Midrange and Mainframe Life Cycle Extension language
# https://github.com/jwoehr/ublu
# Copyright (C) 2017 Jack J. Woehr http://www.softwoehr.com
# See the Ublu license (BSD-2 open source)

# Record formats -- see the Ublu 'file' and 'record' commands
# Especially record -getformat

# Pushes to tuple stack the delimiter for var-len layouts
FUNC ux.format.getDelimiter ( fmt ) $[
    calljava -to ~ -- @@fmt -method getDelimiter
]$

# Pushes to tuple stack the field description at the specified index.
FUNC ux.format.getFieldDescription ( fmt index ) $[
    num -to ~ -int @@index
    calljava -to ~ -- @@fmt -primarg ~ -method getFieldDescription
]$

# Pushes to tuple stack the field description with the specified name.  
FUNC ux.format.getFieldDescriptionByName ( fmt name ) $[
    put -to ~ @@name
    calljava -to ~ -- @@fmt -arg ~ -method getFieldDescription      
]$

# Pushes to tuple stack the field descriptions that make up this object.
FUNC ux.format.getFieldNames ( fmt ) $[
    calljava -to ~ -- @@fmt -method getFieldNames
]$

# Pushes to tuple stack the field descriptions that make up this object. 
FUNC ux.format.getFieldDescriptions ( fmt ) $[
    calljava -to ~ -- @@fmt -method getFieldDescriptions
]$

# Pushes to tuple stack the index of the field description named name.
FUNC ux.format.getIndexOfFieldName ( fmt name ) $[
    put -to ~ @@name
    calljava -to ~ -- @@fmt -arg ~ -method getIndexOfFieldName
]$
  
# Pushes to tuple stack the index of the field description of the key field named name.
FUNC ux.format.getIndexOfKeyFieldName ( fmt name ) $[
    calljava -to ~ -- @@fmt -arg ~ -method getIndexOfKeyFieldName ( String
]$

# Pushes to tuple stack the field description of the key field at the specified index.
FUNC ux.format.getKeyFieldDescription ( fmt index ) $[
    num -to ~ -int @@index
    calljava -to ~ -- @@fmt -primarg ~ -method getKeyFieldDescription
]$

# Pushes to tuple stack the field description of the key field with the specified name.  
FUNC ux.format.getKeyFieldDescriptionByName ( fmt name ) $[
    put -to ~ @@name
    calljava -to ~ -- @@fmt -arg ~ -method getKeyFieldDescription      
]$

# Pushes to tuple stack the field descriptions of the key fields that make up this object.
FUNC ux.format.getKeyFieldNames ( fmt ) $[
    calljava -to ~ -- @@fmt -method getKeyFieldNames
]$

# Pushes to tuple stack the field descriptions that make up this object. 
FUNC ux.format.getKeyFieldDescriptions ( fmt ) $[
    calljava -to ~ -- @@fmt -method getKeyFieldDescriptions
]$

# Pushes to tuple stack the names of the field descriptions of the key fields
# that make up this record format
FUNC ux.format.getKeyFieldNames ( fmt ) $[
    calljava -to ~ -- @@fmt -method getKeyFieldNames
]$

# Pushes to tuple stack the index of the field description on which the field description at the specified index depends.
FUNC ux.format.getLengthDependency ( fmt index ) $[
    num -to ~ -int @@index
    calljava -to ~ -- @@fmt -primarg ~ -method getLengthDependency
]$
  
# Pushes to tuple stack the index of the field description on which the field description with the specified name depends.
FUNC ux.format.getLengthDependencyByName ( fmt name ) $[
    put -to ~ @@name
    calljava -to ~ -- @@fmt -arg ~ -method getLengthDependency 
]$

# Pushes to tuple stack the name of this record format.
FUNC ux.format.getName ( fmt ) $[
    calljava -to ~ -- @@fmt -method getName
]$
  
# Pushes to tuple stack a new record based on this record format, which contains default values for the contents of the fields.
FUNC ux.format.getNewRecord ( fmt ) $[
    calljava -to ~ -- @@fmt -method getNewRecord
]$
  
# Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
# public Record getNewRecord(String recordName)

# Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
# public Record getNewRecord(byte[] contents)

# Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
# public Record getNewRecord(byte[] contents, String recordName)
                  
# Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
# public Record getNewRecord(byte[] contents, int offset)

# Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
# public Record getNewRecord(byte[] contents, int offset, String recordName)

# Pushes to tuple stack the number of field descriptions in this record format.
FUNC ux.format.getNumberOfFields ( fmt ) $[
    calljava -to ~ -- @@fmt -method getNumberOfFields
]$
  
# Pushes to tuple stack the number of key field descriptions in this record format.
FUNC ux.format.getNumberOfKeyFields ( fmt ) $[
    calljava -to ~ -- @@fmt -method getNumberOfKeyFields
]$
  
# Pushes to tuple stack the index of the field description on which the field description at the specified index depends.
FUNC ux.format.getOffsetDependency ( fmt offset ) $[
    num -to ~ -int @@offset
    calljava -to ~ -- @@fmt -primarg ~ -method getOffsetDependency
]$
  
# Pushes to tuple stack the index of the field description on which the field description with the specified name depends.
FUNC ux.format.getOffsetDependencyByName ( fmt name ) $[
    put -to ~ @@name
    calljava -to ~ -- @@fmt -arg ~ -method getOffsetDependency
]$

# Pushes to tuple stack the record format ID.
FUNC ux.format.getRecordFormatID ( fmt ) $[
    calljava -to ~ -- @@fmt -method getRecordFormatID
]$
  
# Pushes to tuple stack the record format type.
FUNC ux.format.getRecordFormatType ( fmt ) $[
    calljava -to ~ -- @@fmt -method getRecordFormatType
]$

# Sets the delimiter.
FUNC ux.format.setDelimiter ( delim )
    @@delim -to ~ -substring 0 1
    calljava -to ~ -- @@fmt -method setDelimiter
]$
  
# Sets the field on which a dependent field depends.
# Sets the field on which a dependent field depends.
# Sets the name of this record format.
# Sets the field on which a dependent field depends.
# Sets the field on which a dependent field depends.
# Sets the record format ID.
# Sets the record format type.

\\ ${

# unimplemented yet

int 	getLengthDependency(int index)
Pushes to tuple stack the index of the field description on which the field description at the specified index depends.
int 	getLengthDependency(String name)
Pushes to tuple stack the index of the field description on which the field description with the specified name depends.


Record 	getNewRecord()
Pushes to tuple stack a new record based on this record format, which contains default values for the contents of the fields.
Record 	getNewRecord(byte[] contents)
Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
Record 	getNewRecord(byte[] contents, int offset)
Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
Record 	getNewRecord(byte[] contents, int offset, String recordName)
Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
Record 	getNewRecord(byte[] contents, String recordName)
Pushes to tuple stack a new record based on this record format, which contains data from the specified byte array.
Record 	getNewRecord(String recordName)
Pushes to tuple stack a new record based on this record format, which contains default values for the contents of the fields.
int 	getNumberOfFields()
Pushes to tuple stack the number of field descriptions in this record format.
int 	getNumberOfKeyFields()
Pushes to tuple stack the number of key field descriptions in this record format.
int 	getOffsetDependency(int index)
Pushes to tuple stack the index of the field description on which the field description at the specified index depends.
int 	getOffsetDependency(String name)
Pushes to tuple stack the index of the field description on which the field description with the specified name depends.
String 	getRecordFormatID()
Pushes to tuple stack the record format ID.
int 	getRecordFormatType()
Pushes to tuple stack the record format type.
void 	removePropertyChangeListener(PropertyChangeListener listener)
Removes a listener from the change list.
void 	removeRecordDescriptionListener(RecordDescriptionListener listener)
Removes a listener from the record description listeners list.
void 	removeVetoableChangeListener(VetoableChangeListener listener)
Removes a listener from the veto change listeners list.
void 	setDelimiter(char delimiter)
Sets the delimiter.
void 	setLengthDependency(int dependentField, int fieldDependedOn)
Sets the field on which a dependent field depends.
void 	setLengthDependency(String dependentField, String fieldDependedOn)
Sets the field on which a dependent field depends.
void 	setName(String name)
Sets the name of this record format.
void 	setOffsetDependency(int dependentField, int fieldDependedOn)
Sets the field on which a dependent field depends.
void 	setOffsetDependency(String dependentField, String fieldDependedOn)
Sets the field on which a dependent field depends.
void 	setRecordFormatID(String id)
Sets the record format ID.
void 	setRecordFormatType(int type)
Sets the record format type. 

}$