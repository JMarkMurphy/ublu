# ux.user.ublu
# Extension to Ublu Midrange and Mainframe Life Cycle Extension language
# https://github.com/jwoehr/ublu
# Copyright (C) 2016 Jack J. Woehr http://www.softwoehr.com
# See the Ublu license (BSD-2 open source)

# Methods to call on the user object returned by Ublu's user command

# boolean 	exists()
# Determines if this user profile exists on the system.
FUNC ux.user.exists ( userobj ) $[
    calljava -to ~ -- @@userobj -method exists
]$
# String 	getAccountingCode()
# Retrieves the accounting code that is associated with this user.
FUNC ux.user.getAccountingCode ( userobj ) $[
    calljava -to ~ -- @@userobj -method getAccountingCode
]$
# String 	getAssistanceLevel()
# Retrieves the user interface that the user will use.
FUNC ux.user.getAssistanceLevel ( userobj ) $[
    calljava -to ~ -- @@userobj -method getAssistanceLevel
]$
# String 	getAttentionKeyHandlingProgram()
# Retrieves the attention key handling program for this user.
FUNC ux.user.getAttentionKeyHandlingProgram ( userobj ) $[
    calljava -to ~ -- @@userobj -method getAttentionKeyHandlingProgram
]$
# int 	getCCSID()
# Retrieves the character code set ID to be used by the system for this user.
FUNC ux.user.getCCSID ( userobj ) $[
    calljava -to ~ -- @@userobj -method getCCSID
]$
# String 	getCHRIDControl()
# Retrieves the character identifier control for the user.
FUNC ux.user.getCHRIDControl ( userobj ) $[
    calljava -to ~ -- @@userobj -method getCHRIDControl
]$
# String 	getCountryID()
# Retrieves the country or region ID used by the system for this user.
FUNC ux.user.getCountryID ( userobj ) $[
    calljava -to ~ -- @@userobj -method getCountryID
]$
# String 	getCurrentLibraryName()
# Retrieves the name of the user's current library.
FUNC ux.user.getCurrentLibraryName ( userobj ) $[
    calljava -to ~ -- @@userobj -method getCurrentLibraryName
]$
# int 	getDaysUntilPasswordExpire()
# Retrieves the number of days until the password will expire.
FUNC ux.user.getDaysUntilPasswordExpire ( userobj ) $[
    calljava -to ~ -- @@userobj -method getDaysUntilPasswordExpire
]$
 # String 	getDescription()
# Retrieves the descriptive text for the user profile.
FUNC ux.user.getDescription ( userobj ) $[
    calljava -to ~ -- @@userobj -method getDescription
]$
# String 	getDetailInSTRAUTCOL() 
# ?? No description in javadocs
FUNC ux.user.getDetailInSTRAUTCOL ( userobj ) $[
    calljava -to ~ -- @@userobj -method getDetailInSTRAUTCOL
]$
# DirectoryEntry 	getDirectoryEntry()
# Retrieves the system distribution directory entry for the user profile, if one exists.
FUNC ux.user.getDirectoryEntry ( userobj ) $[
    calljava -to ~ -- @@userobj -method getDirectoryEntry
]$
# String 	getDisplaySignOnInformation()
# Retrieves whether the sign-on information display is shown when the user signs on.
FUNC ux.user.getDisplaySignOnInformation ( userobj ) $[
    calljava -to ~ -- @@userobj -method getDisplaySignOnInformation
]$
# String[] 	getDLOObjectTypesInSTRAUTCOL()
# ?? No description in javadocs
FUNC ux.user.getDLOObjectTypesInSTRAUTCOL ( userobj ) $[
    calljava -to ~ -- @@userobj -method getDLOObjectTypesInSTRAUTCOL
]$
# String[] 	getFileSystemObjectTypesInSTRAUTCOL()
# ?? No description in javadocs
FUNC ux.user.getFileSystemObjectTypesInSTRAUTCOL ( userobj ) $[
    calljava -to ~ -- @@userobj -method getFileSystemObjectTypesInSTRAUTCOL
]$
# String 	getGroupAuthority()
# Retrieves the authority the user's group profile has to objects the user creates.
FUNC ux.user.getGroupAuthority ( userobj ) $[
    calljava -to ~ -- @@userobj -method getGroupAuthority
]$
# String 	getGroupAuthorityType()
# Retrieves the type of authority the user's group has to objects the user creates.
FUNC ux.user.getGroupAuthorityType ( userobj ) $[
    calljava -to ~ -- @@userobj -method getGroupAuthorityType
]$
# long 	getGroupID()
# Retrieves the group ID number for the user profile.
FUNC ux.user.getGroupID ( userobj ) $[
    calljava -to ~ -- @@userobj -method getGroupID
]$
# String 	getGroupProfileName()
# Retrieves the name of the group profile.
FUNC ux.user.getGroupProfileName ( userobj ) $[
    calljava -to ~ -- @@userobj -method getGroupProfileName
]$
# int 	getHighestSchedulingPriority()
# Retrieves the highest scheduling priority the user is allowed to have for each job submitted to the system.
FUNC ux.user.getHighestSchedulingPriority ( userobj ) $[
    calljava -to ~ -- @@userobj -method getHighestSchedulingPriority
]$
# String 	getHomeDirectory()
# Retrieves the home directory for this user profile.
FUNC ux.user.getHomeDirectory ( userobj ) $[
    calljava -to ~ -- @@userobj -method getHomeDirectory
]$
# String[] 	getIASPNames()
# Retrieves the list of independent auxiliary storage pool (IASP) names in use by this user.
FUNC ux.user.getIASPNames ( userobj ) $[
    calljava -to ~ -- @@userobj -method getIASPNames
]$
# int 	getIASPStorageAllowed(String iaspName)
# Retrieves the maximum amount of auxiliary storage in kilobytes that can be assigned to store permanent object owned by this user on the given independant ASP.
FUNC ux.user.getIASPStorageAllowed ( userobj iaspName ) $[
    calljava -to ~ -- @@userobj -method getIASPStorageAllowed -arg iaspName
]$
# int 	getIASPStorageUsed(String iaspName)
# Retrieves the amount of auxiliary storage in kilobytes occupied by this user's owned objects on the given independent ASP.
FUNC ux.user.getIASPStorageUsed ( userobj iaspName ) $[
    calljava -to ~ -- @@userobj -method getIASPStorageUsed -arg iaspName
]$
# String 	getInitialMenu()
# Retrieves the initial menu for the user.
FUNC ux.user.getInitialMenu ( userobj ) $[
    calljava -to ~ -- @@userobj -method getInitialMenu
]$
# String 	getInitialProgram()
# Retrieves the initial program for the user.
FUNC ux.user.getInitialProgram ( userobj ) $[
    calljava -to ~ -- @@userobj -method getInitialProgram
]$
# String 	getJobDescription()
# Retrieves the fully qualified integrated file system path name of the job description used for jobs that start through subsystem work station entries.
FUNC ux.user.getJobDescription ( userobj ) $[
    calljava -to ~ -- @@userobj -method getJobDescription
]$
# String 	getKeyboardBuffering()
# Retrieves the keyboard buffering value that is used when a job is initialized for this user.
FUNC ux.user.getKeyboardBuffering ( userobj ) $[
    calljava -to ~ -- @@userobj -method getKeyboardBuffering
]$
# String 	getLanguageID()
# Retrieves the language ID used by the system for this user.
FUNC ux.user.getLanguageID ( userobj ) $[
    calljava -to ~ -- @@userobj -method getLanguageID
]$
# String[] 	getLibNameInSTRAUTCOL()
# ?? No description in javadocs
FUNC ux.user.getLibNameInSTRAUTCOL ( userobj ) $[
    calljava -to ~ -- @@userobj -method getLibNameInSTRAUTCOL
]$
# String 	getLimitCapabilities()
# Retrieves whether the user has limited capabilites.
FUNC ux.user.getLimitCapabilities ( userobj ) $[
    calljava -to ~ -- @@userobj -method getLimitCapabilities
]$
# String 	getLimitDeviceSessions()
# Retrieves whether the user is limited to one device session.
FUNC ux.user.getLimitDeviceSessions ( userobj ) $[
    calljava -to ~ -- @@userobj -method getLimitDeviceSessions
]$
# String[] 	getLocaleJobAttributes()
# Retrieves a list of the job attributes which are set from the user's locale path name.
FUNC ux.user.getLocaleJobAttributes ( userobj ) $[
    calljava -to ~ -- @@userobj -method getLocaleJobAttributes
]$
# String 	getLocalePathName()
# Retrieves the locale path name that is assigned to the user profile when a job is started.
FUNC ux.user.getLocalePathName ( userobj ) $[
    calljava -to ~ -- @@userobj -method getLocalePathName
]$
# int 	getMaximumStorageAllowed()
# Retrieves the maximum amount of auxiliary storage (in kilobytes) that can be assigned to store permanant objects owned by the user.
FUNC ux.user.getMaximumStorageAllowed ( userobj ) $[
    calljava -to ~ -- @@userobj -method getMaximumStorageAllowed
]$
# long 	getMaximumStorageAllowedInLong()
# ?? No description in javadocs.
FUNC ux.user.getMaximumStorageAllowedInLong ( userobj ) $[
    calljava -to ~ -- @@userobj -method getMaximumStorageAllowedInLong
]$
# String 	getMessageQueue()
# Retrieves the fully qualified integrated file system path name of the message queue that is used by this user.
FUNC ux.user.getMessageQueue ( userobj ) $[
    calljava -to ~ -- @@userobj -method getMessageQueue
]$
# String 	getMessageQueueDeliveryMethod()
# Retrieves how the messages are delivered to the message queue used by the user.
FUNC ux.user.getMessageQueueDeliveryMethod ( userobj ) $[
    calljava -to ~ -- @@userobj -method getMessageQueueDeliveryMethod
]$
# int 	getMessageQueueSeverity()
# Retrieves the lowest severity that a message can have and still be delivered to a user in break or notify mode.
FUNC ux.user.getMessageQueueSeverity ( userobj ) $[
    calljava -to ~ -- @@userobj -method getMessageQueueSeverity
]$
# String 	getName()
# Returns the user profile name.
FUNC ux.user.getName ( userobj ) $[
    calljava -to ~ -- @@userobj -method getName
]$
# String 	getObjectAuditingValue()
# Retrieves the user's object auditing value.
FUNC ux.user.getObjectAuditingValue ( userobj ) $[
    calljava -to ~ -- @@userobj -method getObjectAuditingValue
]$
# String[] 	getObjectNamesInSTRAUTCOL() 
# ?? No description in javadocs
FUNC ux.user.getObjectNamesInSTRAUTCOL ( userobj ) $[
    calljava -to ~ -- @@userobj -method getObjectNamesInSTRAUTCOL
]$
# UserObjectsOwnedList 	getObjectsOwned()
# Return an object representing the objects that this user owns.
FUNC ux.user.getObjectsOwned ( userobj ) $[
    calljava -to ~ -- @@userobj -method getObjectsOwned
]$
# String[] 	getObjectTypesInSTRAUTCOL()
# ?? No description in javadocs
FUNC ux.user.getObjectTypesInSTRAUTCOL ( userobj ) $[
    calljava -to ~ -- @@userobj -method getObjectTypesInSTRAUTCOL
]$
# String[] 	getOmitLibNamesInSTRAUTCOL()
# ?? No description in javadocs
FUNC ux.user.getOmitLibNamesInSTRAUTCOL ( userobj ) $[
    calljava -to ~ -- @@userobj -method getOmitLibNamesInSTRAUTCOL
]$
# String 	getOutputQueue()
# Retrieves the output queue used by this user.
FUNC ux.user.getOutputQueue ( userobj ) $[
    calljava -to ~ -- @@userobj -method getOutputQueue
]$
# String 	getOwner()
# Retrieves who is to own objects created by this user.
FUNC ux.user.getOwner ( userobj ) $[
    calljava -to ~ -- @@userobj -method getOwner
]$
# String 	getPasswordChangeBlock()
# Retrieves the time period during which a password is blocked from being changed following the prior successful password change operation.
FUNC ux.user.getPasswordChangeBlock ( userobj ) $[
    calljava -to ~ -- @@userobj -method getPasswordChangeBlock
]$
# int 	getPasswordExpirationInterval()
# Retrieves the number of days the user's password can remain active before it must be changed.
FUNC ux.user.getPasswordExpirationInterval ( userobj ) $[
    calljava -to ~ -- @@userobj -method getPasswordExpirationInterval
]$
# Date 	getPasswordExpireDate()
# Retrieves the date the user's password expires.
FUNC ux.user.getPasswordExpireDate ( userobj ) $[
    calljava -to ~ -- @@userobj -method getPasswordExpireDate
]$
# Date 	getPasswordLastChangedDate()
# Retrieves the date the user's password was last changed.
FUNC ux.user.getPasswordLastChangedDate ( userobj ) $[
    calljava -to ~ -- @@userobj -method getPasswordLastChangedDate
]$
# Date 	getPreviousSignedOnDate()
# Retrieves the date and time the user last signed on.
FUNC ux.user.getPreviousSignedOnDate ( userobj ) $[
    calljava -to ~ -- @@userobj -method getPreviousSignedOnDate
]$
# String 	getPrintDevice()
# Retrieves the printer used to print for this user.
FUNC ux.user.getPrintDevice ( userobj ) $[
    calljava -to ~ -- @@userobj -method getPrintDevice
]$
# int 	getSignedOnAttemptsNotValid()
# Retrieves the number of sign-on attempts that were not valid since the last successful sign-on.
FUNC ux.user.getSignedOnAttemptsNotValid ( userobj ) $[
    calljava -to ~ -- @@userobj -method getSignedOnAttemptsNotValid
]$
# String 	getSortSequenceTable()
# Retrieves the name of the sort sequence table used for string comparisons.
FUNC ux.user.getSortSequenceTable ( userobj ) $[
    calljava -to ~ -- @@userobj -method getSortSequenceTable
]$
# String[] 	getSpecialAuthority()
# Retrieves a list of the special authorities the user has.
FUNC ux.user.getSpecialAuthority ( userobj ) $[
    calljava -to ~ -- @@userobj -method getSpecialAuthority
]$
# String 	getSpecialEnvironment()
# Retrieves the special environment the user operates in after signing on.
FUNC ux.user.getSpecialEnvironment ( userobj ) $[
    calljava -to ~ -- @@userobj -method getSpecialEnvironment
]$
# String 	getStatus()
# Retrieves the status of the user profile.
FUNC ux.user.getStatus ( userobj ) $[
    calljava -to ~ -- @@userobj -method getStatus
]$
# int 	getStorageUsed()
# Retrieves the amount of auxiliary storage (in kilobytes) occupied by this user's owned objects.
FUNC ux.user.getStorageUsed ( userobj ) $[
    calljava -to ~ -- @@userobj -method getStorageUsed
]$
# long 	getStorageUsedInLong()
# Retrieves the amount of auxiliary storage (in kilobytes) occupied by this user's owned objects.
FUNC ux.user.getStorageUsedInLong ( userobj ) $[
    calljava -to ~ -- @@userobj -method getStorageUsedInLong
]$
# String[] 	getSupplementalGroups()
# Retrieves the supplemental groups for the user profile.
FUNC ux.user.getSupplementalGroups ( userobj ) $[
    calljava -to ~ -- @@userobj -method getSupplementalGroups
]$
# int 	getSupplementalGroupsNumber()
# Retrieves the number of supplemental groups for the user profile.
FUNC ux.user.getSupplementalGroupsNumber ( userobj ) $[
    calljava -to ~ -- @@userobj -method getSupplementalGroupsNumber
]$
# AS400 	getSystem()
# Returns the system object representing the system on which the user profile exists.
FUNC ux.user.getSystem ( userobj ) $[
    calljava -to ~ -- @@userobj -method getSystem
]$
# String[] 	getUserActionAuditLevel()
# Retrieves a list of action audit levels for the user.
FUNC ux.user.getUserActionAuditLevel ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserActionAuditLevel
]$
# String 	getUserClassName()
# Retrieves the user class name.
FUNC ux.user.getUserClassName ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserClassName
]$
# String 	getUserExpirationAction()
# Retrieves the action that will occur when the user profile has expired.
FUNC ux.user.getUserExpirationAction ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserExpirationAction
]$
# Date 	getUserExpirationDate()
# Retrieves the date when the user profile expires and is automatically disabled.
FUNC ux.user.getUserExpirationDate ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserExpirationDate
]$
# int 	getUserExpirationInterval()
# Retrieves the number of days before the user profile is automatically disabled.
FUNC ux.user.getUserExpirationInterval ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserExpirationInterval
]$
# long 	getUserID()
# Retrieves the user ID (UID) number for the user profile.
FUNC ux.user.getUserID ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserID
]$
# String[] 	getUserOptions()
# Retrieves a list of options for users to customize their environment.
FUNC ux.user.getUserOptions ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserOptions
]$
# String 	getUserProfileName()
# Retrieves the name of the user profile for which the information is returned.
FUNC ux.user.getUserProfileName ( userobj ) $[
    calljava -to ~ -- @@userobj -method getUserProfileName
]$
# boolean 	hasSpecialAuthority(String authority)
# Retrieves if this user profile has been granted the specified authority, or belongs to a group profile that has been granted the specified authority.
# authority is one of:
#   *ALLOBJ - All object.
#   *SECADM - Security administrator.
#   *JOBCTL - Job control.
#   *SPLCTL - Spool control.
#   *SAVSYS - Save system.
#   *SERVICE - Service.
#   *AUDIT - Audit.
#   *IOSYSCFG - Input/output system configuration.
FUNC ux.user.hasSpecialAuthority ( userobj authority ) $[
    calljava -to ~ -- @@userobj -method hasSpecialAuthority -arg @@authority
]$
# boolean 	isAuthCollectionActive()
# ?? No description in javadocs
FUNC ux.user.isAuthCollectionActive ( userobj ) $[
    calljava -to ~ -- @@userobj -method isAuthCollectionActive
]$
# boolean 	isAuthCollectionDeleted()
# ?? No description in javadocs
FUNC ux.user.isAuthCollectionDeleted ( userobj ) $[
    calljava -to ~ -- @@userobj -method isAuthCollectionDeleted
]$
# boolean 	isAuthCollectionRepositoryExist()
# ?? No description in javadocs
FUNC ux.user.isAuthCollectionRepositoryExist ( userobj ) $[
    calljava -to ~ -- @@userobj -method isAuthCollectionRepositoryExist
]$
# boolean 	isGroupHasMember()
# Retrieves whether this user is a group that has members.
FUNC ux.user.isGroupHasMember ( userobj ) $[
    calljava -to ~ -- @@userobj -method isGroupHasMember
]$
# boolean 	isLocalPasswordManagement()
# Retrieves whether the password is managed locally.
FUNC ux.user.isLocalPasswordManagement ( userobj ) $[
    calljava -to ~ -- @@userobj -method isLocalPasswordManagement
]$
# boolean 	isNoPassword()
# Retrieves whether *NONE is specified for the password in the user profile.
FUNC ux.user.isNoPassword ( userobj ) $[
    calljava -to ~ -- @@userobj -method isNoPassword
]$
# boolean 	isPasswordSetExpire()
# Retrieves whether the user's password is set to expired, requiring the user to change the password when signing on.
FUNC ux.user.isPasswordSetExpire ( userobj ) $[
    calljava -to ~ -- @@userobj -method isPasswordSetExpire
]$
# boolean 	isUserEntitlementRequired()
# Retrieves whether a user entitlement is required for this user profile.
FUNC ux.user.isUserEntitlementRequired ( userobj ) $[
    calljava -to ~ -- @@userobj -method isUserEntitlementRequired
]$
# boolean 	isWithDigitalCertificates()
# Retrieves whether there are digital certificates associated with this user.
FUNC ux.user.isWithDigitalCertificates ( userobj ) $[
    calljava -to ~ -- @@userobj -method isWithDigitalCertificates
]$
# void 	loadUserInformation()
# Refreshes the values for all attributes.
FUNC ux.user.loadUserInformation ( userobj ) $[
    calljava -- @@userobj -method loadUserInformation
]$
# void 	refresh()
# Refreshes all the attribute values for this User object by retrieving them from the system.
FUNC ux.user.refresh ( userobj ) $[
    calljava -- @@userobj -method refresh
]$

# Dump most user properties to a destination datasink  
FUNC ux.user.dump ( userobj dest ) $[
    TRY $[
    ux.user.loadUserInformation ( @@userobj )
    put -to @@dest ${ ux.user.loadUserInformation is void }$
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.loadUserInformation }$ ]$
    TRY $[
    ux.user.refresh ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.refresh is void }$
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.refresh }$ ]$
    TRY $[
    ux.user.getUserProfileName ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserProfileName }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserProfileName }$ ]$
    TRY $[
    ux.user.exists ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.exists }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.exists }$ ]$
    TRY $[
    ux.user.getAccountingCode ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getAccountingCode }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getAccountingCode }$ ]$
    TRY $[
    ux.user.getAssistanceLevel ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getAssistanceLevel }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getAssistanceLevel }$ ]$
    TRY $[
    ux.user.getAttentionKeyHandlingProgram ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getAttentionKeyHandlingProgram }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getAttentionKeyHandlingProgram }$ ]$
    TRY $[
    ux.user.getCCSID ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getCCSID }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getCCSID }$ ]$
    TRY $[
    ux.user.getCHRIDControl ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getCHRIDControl }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getCHRIDControl }$ ]$
    TRY $[
    ux.user.getCountryID ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getCountryID }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getCountryID }$ ]$
    TRY $[
    ux.user.getCurrentLibraryName ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getCurrentLibraryName }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getCurrentLibraryName }$ ]$
    TRY $[
    ux.user.getDaysUntilPasswordExpire ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getDaysUntilPasswordExpire }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getDaysUntilPasswordExpire }$ ]$
    TRY $[
    ux.user.getDescription ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getDescription }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getDescription }$ ]$
    \\ ${
    TRY $[
    ux.user.getDetailInSTRAUTCOL ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getDetailInSTRAUTCOL  string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@des
    ]$ CATCH $[ put ${ Error in ux.user.getDetailInSTRAUTCOL  ]$
     }$
    TRY $[
    ux.user.getDirectoryEntry ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getDirectoryEntry }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getDirectoryEntry }$ ]$
    TRY $[
    ux.user.getDisplaySignOnInformation ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getDisplaySignOnInformation }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getDisplaySignOnInformation }$ ]$
     \\ ${
    TRY $[
    ux.user.getDLOObjectTypesInSTRAUTCOL ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getDLOObjectTypesInSTRAUTCOL string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getDLOObjectTypesInSTRAUTCOL  ]$
    TRY $[
    ux.user.getFileSystemObjectTypesInSTRAUTCOL ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getFileSystemObjectTypesInSTRAUTCOL string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getFileSystemObjectTypesInSTRAUTCOL ]$
     }$
    TRY $[
    ux.user.getGroupAuthority ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getGroupAuthority }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getGroupAuthority }$ ]$
    TRY $[
    ux.user.getGroupAuthorityType ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getGroupAuthorityType }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getGroupAuthorityType }$ ]$
    TRY $[
    ux.user.getGroupID ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getGroupID }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getGroupID }$ ]$
    TRY $[
    ux.user.getGroupProfileName ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getGroupProfileName }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getGroupProfileName }$ ]$
    TRY $[
    ux.user.getHighestSchedulingPriority ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getHighestSchedulingPriority }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getHighestSchedulingPriority }$ ]$
    TRY $[
    ux.user.getHomeDirectory ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getHomeDirectory }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getHomeDirectory }$ ]$
    TRY $[
    ux.user.getIASPNames ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getIASPNames }$
    LOCAL @IASPList
    list -to @IASPList -source ~
    FOR @i in @IASPList $[
        string -to @@dest -cat @@dest @i
        string -to @@dest -bl @@dest
    ]$
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getIASPNames }$ ]$
    \\ ${
    TRY $[
    ux.user.getIASPStorageAllowed ( @@userobj ) 
    string -to @@dest -cat @@dest ux.user.getIASPStorageAllowed  string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getIASPStorageAllowed ]$
    TRY $[
    ux.user.getIASPStorageUsed ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getIASPStorageUsed  string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getIASPStorageUsed ]$
    }$
    TRY $[
    ux.user.getInitialMenu ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getInitialMenu }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getInitialMenu }$ ]$
    TRY $[
    ux.user.getInitialProgram ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getInitialProgram }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getInitialProgram }$ ]$
    TRY $[
    ux.user.getJobDescription ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getJobDescription }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getJobDescription }$ ]$
    TRY $[
    ux.user.getKeyboardBuffering ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getKeyboardBuffering }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getKeyboardBuffering }$ ]$
    TRY $[
    ux.user.getLanguageID ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getLanguageID }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getLanguageID }$ ]$
     \\ ${
    TRY $[
    ux.user.getLibNameInSTRAUTCOL ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getLibNameInSTRAUTCOL string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getLibNameInSTRAUTCOL ]$
     }$
    TRY $[
    ux.user.getLimitCapabilities ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getLimitCapabilities }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getLimitCapabilities }$ ]$
    TRY $[
    ux.user.getLimitDeviceSessions ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getLimitDeviceSessions }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getLimitDeviceSessions }$ ]$
    TRY $[
    ux.user.getLocaleJobAttributes ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getLocaleJobAttributes }$
    list -to ~ -source ~
    string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getLocaleJobAttributes }$ ]$
    TRY $[
    ux.user.getLocalePathName ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getLocalePathName }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getLocalePathName }$ ]$
    TRY $[
    ux.user.getMaximumStorageAllowed ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getMaximumStorageAllowed }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getMaximumStorageAllowed }$ ]$
    TRY $[
    ux.user.getMaximumStorageAllowedInLong ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getMaximumStorageAllowedInLong }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getMaximumStorageAllowedInLong }$ ]$
    TRY $[
    ux.user.getMessageQueue ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getMessageQueue }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getMessageQueue }$ ]$
    TRY $[
    ux.user.getMessageQueueDeliveryMethod ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getMessageQueueDeliveryMethod }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getMessageQueueDeliveryMethod }$ ]$
    TRY $[
    ux.user.getMessageQueueSeverity ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getMessageQueueSeverity }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getMessageQueueSeverity }$ ]$
    TRY $[
    ux.user.getName ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getName }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getName }$ ]$
    TRY $[
    ux.user.getObjectAuditingValue ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getObjectAuditingValue }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getObjectAuditingValue }$ ]$
     \\ ${
    TRY $[
    ux.user.getObjectNamesInSTRAUTCOL ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getObjectNamesInSTRAUTCOL string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getObjectNamesInSTRAUTCOL ]$
     }$
    TRY $[
    ux.user.getObjectsOwned ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getObjectsOwned }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getObjectsOwned }$ ]$
    \\ ${
    TRY $[
    ux.user.getObjectTypesInSTRAUTCOL ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getObjectTypesInSTRAUTCOL string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getObjectTypesInSTRAUTCOL ]$
    TRY $[
    ux.user.getOmitLibNamesInSTRAUTCOL ( @@userobj )
    string -to @@dest -cat @@dest ux.user.getOmitLibNamesInSTRAUTCOL string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getOmitLibNamesInSTRAUTCOL ]$
    }$
    TRY $[
    ux.user.getOutputQueue ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getOutputQueue }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getOutputQueue }$ ]$
    TRY $[
    ux.user.getOwner ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getOwner }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getOwner }$ ]$
    TRY $[
    ux.user.getPasswordChangeBlock ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getPasswordChangeBlock }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getPasswordChangeBlock }$ ]$
    TRY $[
    ux.user.getPasswordExpirationInterval ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getPasswordExpirationInterval }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getPasswordExpirationInterval }$ ]$
    TRY $[
    ux.user.getPasswordExpireDate ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getPasswordExpireDate }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getPasswordExpireDate }$ ]$
    TRY $[
    ux.user.getPasswordLastChangedDate ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getPasswordLastChangedDate }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getPasswordLastChangedDate }$ ]$
    TRY $[
    ux.user.getPreviousSignedOnDate ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getPreviousSignedOnDate }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getPreviousSignedOnDate }$ ]$
    TRY $[
    ux.user.getPrintDevice ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getPrintDevice }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getPrintDevice }$ ]$
    TRY $[
    ux.user.getSignedOnAttemptsNotValid ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getSignedOnAttemptsNotValid }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getSignedOnAttemptsNotValid }$ ]$
    TRY $[
    ux.user.getSortSequenceTable ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getSortSequenceTable }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getSortSequenceTable }$ ]$
    TRY $[
    ux.user.getSpecialAuthority ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getSpecialAuthority }$
    list -to ~ -source ~
    string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getSpecialAuthority }$ ]$
    TRY $[
    ux.user.getSpecialEnvironment ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getSpecialEnvironment }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getSpecialEnvironment }$ ]$
    TRY $[
    ux.user.getStatus ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getStatus }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getStatus }$ ]$
    TRY $[
    ux.user.getStorageUsed ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getStorageUsed }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getStorageUsed }$ ]$
    TRY $[
    ux.user.getStorageUsedInLong ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getStorageUsedInLong }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getStorageUsedInLong }$ ]$
    TRY $[
    ux.user.getSupplementalGroups ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getSupplementalGroups }$
    list -to ~ -source ~
    string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getSupplementalGroups }$ ]$
    TRY $[
    ux.user.getSupplementalGroupsNumber ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getSupplementalGroupsNumber }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getSupplementalGroupsNumber }$ ]$
    TRY $[
    ux.user.getSystem ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getSystem }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getSystem }$ ]$
    TRY $[
    ux.user.getUserActionAuditLevel ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserActionAuditLevel }$
    list -to ~ -source ~  
    string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserActionAuditLevel }$ ]$
    TRY $[
    ux.user.getUserClassName ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserClassName }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserClassName }$ ]$
    TRY $[
    ux.user.getUserExpirationAction ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserExpirationAction }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserExpirationAction }$ ]$
    TRY $[
    ux.user.getUserExpirationDate ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserExpirationDate }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserExpirationDate }$ ]$
    TRY $[
    ux.user.getUserExpirationInterval ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserExpirationInterval }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserExpirationInterval }$ ]$
    TRY $[
    ux.user.getUserID ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserID }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserID }$ ]$
    TRY $[
    ux.user.getUserOptions ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.getUserOptions }$
    list -to ~ -source ~
    string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.getUserOptions }$ ]$
    TRY $[
    put -to ~ *ALLOBJ     
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *ALLOBJ }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    put -to ~ *SECADM
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *SECADM }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    put -to ~ *JOBCTL
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *JOBCTL }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    put -to ~ *SPLCTL
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *SPLCTL }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    put -to ~ *SAVSYS 
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *SAVSYS }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    put -to ~ *SERVICE
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *SERVICE }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    put -to ~ *AUDIT
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *AUDIT }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    put -to ~ *IOSYSCFG
    ux.user.hasSpecialAuthority ( @@userobj ~ )
    string -to @@dest -cat @@dest ${ ux.user.hasSpecialAuthority *IOSYSCFG }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.hasSpecialAuthority }$ ]$
    TRY $[
    ux.user.isAuthCollectionActive ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isAuthCollectionActive }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isAuthCollectionActive }$ ]$
    TRY $[
    ux.user.isAuthCollectionDeleted ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isAuthCollectionDeleted }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isAuthCollectionDeleted }$ ]$
    TRY $[
    ux.user.isAuthCollectionRepositoryExist ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isAuthCollectionRepositoryExist }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isAuthCollectionRepositoryExist }$ ]$
    TRY $[
    ux.user.isGroupHasMember ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isGroupHasMember }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isGroupHasMember }$ ]$
    TRY $[
    ux.user.isLocalPasswordManagement ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isLocalPasswordManagement }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isLocalPasswordManagement }$ ]$
    TRY $[
    ux.user.isNoPassword ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isNoPassword }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isNoPassword }$ ]$
    TRY $[
    ux.user.isPasswordSetExpire ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isPasswordSetExpire }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isPasswordSetExpire }$ ]$
    TRY $[
    ux.user.isUserEntitlementRequired ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isUserEntitlementRequired }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isUserEntitlementRequired }$ ]$
    TRY $[
    ux.user.isWithDigitalCertificates ( @@userobj )
    string -to @@dest -cat @@dest ${ ux.user.isWithDigitalCertificates }$ string -to @@dest -cat @@dest ~ 
    string -to @@dest -nl @@dest
    ]$ CATCH $[ put ${ Error in ux.user.isWithDigitalCertificates }$ ]$
]$
  
# end
