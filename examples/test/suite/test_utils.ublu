# test_utils.ublu
# Utilities for:
# Test Suite for Ublu Midrange and Mainframe Life Cycle Extension language
# https://github.com/jwoehr/ublu
# Copyright (C) 2017 Jack J. Woehr http://www.softwoehr.com
# See the Ublu license (BSD-2 open source)

# fqp_obj ( library objname objtype )
# push ifs fqp from library + object + objtype
FUNC fqp_obj ( library objname objtype ) $[
  string -to ~ -cat /QSYS.LIB/ @@library
  ~ -to ~ -cat .LIB/
  ~ -to ~ -cat @@objname
  ~ -to ~ -cat .
  ~ -to ~ -cat @@objtype
]$
  
# fqp_file ( library filename )
# push ifs fqp from library and filename
FUNC fqp_file ( library filename ) $[
    fqp_obj ( @@library @@filename FILE )
]$
  
#  fqp_mbr ( fqp_file mbrname )
# push ifs fqp from file fqp and membername 
FUNC fqp_mbr ( fqp_file mbrname ) $[
    string -to ~ -cat @@fqp_file /
    ~ -to ~ -cat @@mbrname
    ~ -to ~ -cat .MBR
]$

# cat_fp ( fqdirpath filename )
# Push a local filepath from a directory and a filename
FUNC cat_fp ( fqdirpath filename ) $[
    string -to ~ -cat @@fqdirpath /
     ~ -to ~ -cat @@filename
]$
  
# Push current time in milliseconds since 1970  
FUNC currentTimeMillis ( ) $[
    calljava -to ~ -class java.lang.System -method currentTimeMillis
    calljava -to ~ -class java.math.BigInteger -method valueOf -primarg ~
]$
  
# Push record format for testing. Format will persist and can be reused to create records
FUNC createTestRecordFormat ( ) $[
    LOCAL @fmt LOCAL @filnam LOCAL @tmstrt LOCAL @tmend LOCAL @desc LOCAL @xpfail
    
    string -to ~ -trim FILNAM
    num -to ~ -int 50
    calljava -to ~ -new com.ibm.as400.access.AS400Text -primarg ~
    calljava -to @filnam -new com.ibm.as400.access.CharacterFieldDescription -arg ~ -primarg ~

    string -to ~ -trim TMSTRT
    calljava -to ~ -new com.ibm.as400.access.AS400UnsignedBin8 
    calljava -to @tmstrt -new com.ibm.as400.access.BinaryFieldDescription -arg ~ -primarg ~
    
    string -to ~ -trim TMEND
    calljava -to ~ -new com.ibm.as400.access.AS400UnsignedBin8
    calljava -to @tmend -new com.ibm.as400.access.BinaryFieldDescription -arg ~ -primarg ~

    string -to ~ -trim DESCR
    num -to ~ -int 1024
    calljava -to ~ -new com.ibm.as400.access.AS400Text -primarg ~
    calljava -to @desc -new com.ibm.as400.access.CharacterFieldDescription -arg ~ -primarg ~

    string -to ~ -trim PFAIL
    num -to ~ -int 1
    calljava -to ~ -new com.ibm.as400.access.AS400Text -primarg ~
    calljava -to @pfail -new com.ibm.as400.access.CharacterFieldDescription -arg ~ -primarg ~

    string -to ~ -trim UBLUTST
    calljava -to @fmt -new com.ibm.as400.access.RecordFormat -primarg ~

    calljava -method addFieldDescription -obj @fmt -arg @filnam
    calljava -method addFieldDescription -obj @fmt -arg @tmstrt
    calljava -method addFieldDescription -obj @fmt -arg @tmend
    calljava -method addFieldDescription -obj @fmt -arg @desc
    calljava -method addFieldDescription -obj @fmt -arg @pfail

    string -to ~ -trim FILNAM
    calljava -method addKeyFieldDescription -obj @fmt -primarg ~
    string -to ~ -trim TMSTRT
    calljava -method addKeyFieldDescription -obj @fmt -primarg ~
    string -to ~ -trim TMEND
    calljava -method addKeyFieldDescription -obj @fmt -primarg ~
    
    tuple -assign ~ @fmt    
]$
  
# createPF ( sys ifspath fmt desc )
# Create physical file at ifspath with format fmt on system sys
# with description desc.
# Leaves the file instance on top of tuple stack.
FUNC createPF ( sys ifspath fmt desc ) $[
    file -to ~ -as400 @@sys -new -keyed @@ifspath
    lifo -dup
    ~ -createfmt @@fmt @@desc
]$
  
# writeMapToRecord ( tfile tmap )
# Given an open pf and a map whose keys are the same as field names,
# get a new record, fill it out and write it to the end of the phys test file.
FUNC writeMapToRecord ( tfile tmap )  $[
    LOCAL @fmt LOCAL @rec
    @@tfile -to @fmt -getfmt
    calljava -to @rec -method getNewRecord -obj @fmt
    @@tmap -to ~ -keys
    FOR @k in ~ $[
        @@tmap -~ @k
        @rec -setfieldbyname @k ~
    ]$
    @@tfile -pos A
    @@tfile -write @rec
]$

# runtest ( includefile testfunc work_dir testsys testrptpf )
# include the testfile and run an individual test
# take action on exception
FUNC runtest ( includefile testfunc work_dir testsys testrptpf ) $[
    TRY $[
        include -s @@includefile
        FUNC -to ~ -get @@testfunc
        CALL ~ ( @@work_dir @@testsys @@testrptpf )
    ]$ CATCH $[
        put -n ${ ERROR: Test }$ put -n -s @@testfunc put ${ failed to run due to an exception. }$
    ]$
]$
      